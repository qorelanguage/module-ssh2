# -*- mode: qore; indent-tabs-mode: nil -*-
#! @file SftpPollerUtil.qm provides definitions for the SftpPoller module

/*  SftpPollerUtil.qm Copyright (C) 2014 - 2022 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

# make sure we have the required qore version
%requires qore >= 1.0

# requires ssh2 functionality
%requires (reexport) ssh2

# assume local vars and do not allow $ chars
%new-style

%requires DataProvider

module SftpPollerUtil {
    version = "1.4.1";
    desc = "SftpPollerUtil module";
    author = "David Nichols <david@qore.org>";
    url = "http://qore.org";
    license = "MIT";
    init = sub () {
        # register the event data type
        DataProvider::registerType("qore/sftp/event", new SftpPollerFileEventInfoDataType());
    };
}

/** @mainpage SftpPollerUtil Module

    @section sftppollerutuilintro Introduction to the SftpPollerUtil Module

    The SftpPollerUtil module defines types for the <a href="../../SftpPoller/html/index.html">SftpPoller</a> module.

    @section sftppollerutilrelnotes SftpPollerUtil Module Release Notes

    @section sftppollerv1_4_1 Version 1.4.1
    - fixed a bug registering the sftp event type
      (<a href="https://github.com/qorelanguage/qore/issues/4389">issue 4389</a>)

    @section sftppollerv1_3_0 Version 1.3.0
    - added support for data provider APIs

    @section sftppollerutilv1_0 Version 1.0
    - initial release
*/

#! main SftpPoller namespace
public namespace SftpPoller {
#! Single file event data description
public class SftpPollerFileEventInfoDataType inherits HashDataType {
    public {
        #! Markdown descriptions for hashdecl members
        const FieldDescriptions = {
            "name": "the name of the file, link, or directory",
            "size": "the size of the file in bytes",
            "uid": "the UID of the owner of the file",
            "gid": "the GID of the owner of the file",
            "mode": "the permissions / mode of the file",
            "atime": "the last accessed date/time of the file",
            "mtime": "the last modified date/time of the file",
            "type": "the type of file; one of:\n- `REGULAR`\n- `DIRECTORY`\n- `SYMBOLIC-LINK`\n"
                "- `BLOCK-DEVICE`\n- `CHARACTER-DEVICE`\n- `FIFO`\n- `SYMBOLIC-LINK`\n- `SOCKET`\n"
                "- `UNKNOWN`",
            "perm": "a string giving UNIX-style permissions for the file (ex: `-rwxr-xr-x`)",
            "data": "the file's data; this will be a string unless the `binary` option is set to `True`, in "
                "which case this key is assigned to the files binary data; this hash key is only present if "
                "`skip_file_content_retrieval` was `False` in the `SftpPoller::constructor()` option hash",
            "filepath": "the remote filepath relative to SFTP root directory",
        };
    }

    #! Creates the type
    constructor() {
        # add members for base hashdecl
        map addField(new QoreDataField($1.getName(), FieldDescriptions{$1.getName()}, $1.getType(),
            $1.getDefaultValue())), TypedHash::forName("SftpPoller::SftpPollerFileEventInfo").getMembers();
    }
}

#! SftpPoller file event hash
public hashdecl SftpPollerFileEventInfo {
    #! the name of the file, link, or directory
    string name;

    #! the size of the file in bytes
    int size;

    #! the UID of the owner of the file
    int uid;

    #! the GID of the owner of the file
    int gid;

    #! the permissions / mode of the file
    int mode;

    #! the last accessed date/time of the file
    date atime;

    #! the last modified date/time of the file
    date mtime;

    #! the type of file
    /** one of:
        - \c "REGULAR"
        - \c "DIRECTORY"
        - \c "SYMBOLIC-LINK"
        - \c "BLOCK-DEVICE"
        - \c "CHARACTER-DEVICE"
        - \c "FIFO"
        - \c "SYMBOLIC-LINK"
        - \c "SOCKET"
        - \c "UNKNOWN"
    */
    string type;

    #! a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
    string perm;

    #! the file's data
    /** @note This will be a string unless the \a "binary" option is set to @ref Qore::True "True", in which case this
        key is assigned to the files binary data; this hash key is only present if \c skip_file_content_retrieval was
        @ref False in the options to \c SftpPoller::constructor()
    */
    data data;

    #! the remote filepath relative to SFTP root directory
    string filepath;
}
}

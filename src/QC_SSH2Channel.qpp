/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SSH2Channel.qpp defines the SSH2Channel class */
/*
    QC_SSH2Channel.qpp

    libssh2 ssh2 channel integration into qore

    Copyright 2010 Wolfgang Ritzinger
    Copyright 2010 - 2018 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "SSH2Channel.h"

//! allows Qore programs to send and receive data through an ssh2 channel
/**
 */
qclass SSH2Channel [arg=SSH2Channel* c; ns=Qore::SSH2; dom=NETWORK];

//! Throws an exception; the constructor cannot be called manually
/** Throws an exception if called directly; this class cannot be instantiated directly
    @throw SSH2CHANNEL-CONSTRUCTOR-ERROR this class cannot be directly constructed but is created from methods in the SSH2Client class
 */
SSH2Channel::constructor() {
   xsink->raiseException("SSH2CHANNEL-CONSTRUCTOR-ERROR", "this class cannot be directly constructed but is created from methods in the SSH2Client class (ex: SSH2Client::openSessionChannel())");
}

//! Throws an exception; currently SSH2Channel objects cannot be copied
/** @throw SSH2CHANNEL-COPY-ERROR copying SSH2Channel objects is not supported
 */
SSH2Channel::copy() {
  xsink->raiseException("SSH2CHANNEL-COPY-ERROR", "copying SSH2Channel objects is not supported");
}

//! destroys the object by disconnecting the channel and deregistering with the parent object
/**
 */
SSH2Channel::destructor() {
   c->destructor();
   c->deref();
}

//! Sets an environment variable on the channel
/** @par Example:
    @code{.py} chan.setenv("", "", 30s); @endcode

    @param var the environment variable to set
    @param value the value to set
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-SETENV-ERROR libssh2 reported an error on the channel
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::setenv(string var, string value, timeout timeout = -1) {
   c->setenv(var->getBuffer(), value->getBuffer(), timeout, xsink);
   return 0;
}

//! Requests a terminal to be allocated to the channel
/** @par Example:
    @code{.py} chan.requestPty("vt100"); @endcode

    @param term terminal emulation requested
    @param modes terminal mode modifier values
    @param width width of the pty in characters
    @param height height of the pty in characters
    @param width_px width of the pty in pixels
    @param height_px height of the pty in pixels
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-REQUESTPTY-ERROR negative terminal or pixel width, height passed
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::requestPty(string term = "vanilla", string modes = "", softint width = LIBSSH2_TERM_WIDTH, softint height = LIBSSH2_TERM_HEIGHT, softint width_px = LIBSSH2_TERM_WIDTH_PX, softint height_px = LIBSSH2_TERM_HEIGHT_PX, timeout timeout = -1) {
   static const char *SSH2CHANNEL_REQUESTPTY_ERR = "SSH2CHANNEL-REQUESTPTY-ERROR";

   if (width < 0) {
      xsink->raiseException(SSH2CHANNEL_REQUESTPTY_ERR, "terminal width given as the optional third argument to SSH2Channel::requestPty() must be non-negative; value given: %d", width);
      return 0;
   }
   if (height < 0) {
      xsink->raiseException(SSH2CHANNEL_REQUESTPTY_ERR, "terminal height given as the optional fourth argument to SSH2Channel::requestPty() must be non-negative; value given: %d", height);
      return 0;
   }
   if (width_px < 0) {
      xsink->raiseException(SSH2CHANNEL_REQUESTPTY_ERR, "terminal pixel width given as the optional fifth argument to SSH2Channel::requestPty() must be non-negative; value given: %d", width_px);
      return 0;
   }
   if (height_px < 0) {
      xsink->raiseException(SSH2CHANNEL_REQUESTPTY_ERR, "terminal pixel height given as the optional sixth argument to SSH2Channel::requestPty() must be non-negative; value given: %d", height_px);
      return 0;
   }

   c->requestPty(xsink, *term, *modes, (int)width, (int)height, (int)width_px, (int)height_px, timeout);
   return 0;
}

//! Request a login shell to be started for the channel
/** @par Example:
    @code{.py} chan.shell(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-SHELL-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::shell(timeout timeout = -1) {
   c->shell(xsink, timeout);
}

//! returns \c True if an end of file condition is flagged on an open channel
/** @par Example:
    @code{.py} bool b = chan.eof(); @endcode

    @return \c True if an end of file condition is flagged on an open channel, \c False if not

    @throw SSH2CHANNEL-ERROR the channel has been closed
 */
bool SSH2Channel::eof() {
    bool b = c->eof(xsink);
    return *xsink ? QoreValue(b) : QoreValue();
}

//! Informs the remote end that we are closing the connection
/** @par Example:
    @code{.py} chan.sendEof(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-SENDEOF-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::sendEof(timeout timeout = -1) {
   c->sendEof(xsink, timeout);
}

//! Wait for the remote end to acknowledge an EOF request
/** @par Example:
    @code{.py} chan.waitEof(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-WAITEOF-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::waitEof(timeout timeout = -1) {
   c->waitEof(xsink, timeout);
}

//! Executes a command on the channel
/** @par Example:
    @code{.py} chan.exec("ls -l", 30s); @endcode

    use SSH2Channel::read() to read the output

    @param command the command to run
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-EXEC-ERROR libssh2 reported an error on the channel while waiting for confirmation from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::exec(string command, timeout timeout = -1) {
   c->exec(command->getBuffer(), timeout, xsink);
}

//! Executes a command on the channel as a subsystem
/** @par Example:
    @code{.py} chan.subsystem("ls -l", 30s); @endcode

    use SSH2Channel::read() to read the output
    @param command the command to run as a subsystem
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-SUBSYSTEM-ERROR libssh2 reported an error on the channel while waiting for confirmation from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::subsystem(string command, timeout timeout = -1) {
   c->subsystem(command->getBuffer(), timeout, xsink);
}

//! Reads data on the given stream and returns it as a string
/** @par Example:
    @code{.py} string str = chan.read(0, 30s); @endcode

    @param stream_id the stream ID to read (0 is the default, meaning \c stdin, 1 is for \c stderr
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-READ-ERROR expecting non-negative integer for stream id as optional first argument to SSH2Channel::read(); use 0 for stdin, 1 for stderr; libssh2 reported an error on the channel while waiting for data from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
string SSH2Channel::read(softint stream_id = 0, timeout timeout = 10000) {
   if (stream_id < 0) {
      xsink->raiseException("SSH2CHANNEL-READ-ERROR", "expecting non-negative integer for stream id as optional first argument to SSH2Channel::read([streamid], [timeout_ms]), got " QLLD " instead; use 0 for stdin, 1 for stderr", stream_id);
      return 0;
   }
   return c->read(xsink, stream_id, timeout);
}

//! Reads data on the given stream and returns it as a binary object
/** @par Example:
    @code{.py} string str = chan.read(0, 30s); @endcode

    @param stream_id the stream ID to read (0 is the default, meaning \c stdin, 1 is for \c stderr
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-READBINARY-ERROR expecting non-negative integer for stream id as optional first argument to SSH2Channel::read(); use 0 for stdin, 1 for stderr; libssh2 reported an error on the channel while waiting for data from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
binary SSH2Channel::readBinary(softint stream_id = 0, timeout timeout = 10000) {
   if (stream_id < 0) {
      xsink->raiseException("SSH2CHANNEL-READBINARY-ERROR", "expecting non-negative integer for stream id as optional first argument to SSH2Channel::readBinary([streamid], [timeout_ms]), got " QLLD " instead; use 0 for stdin, 1 for stderr", stream_id);
      return 0;
   }
   return c->readBinary(xsink, stream_id, timeout);
}

//! Reads a block of data of a given size on the given stream and returns it as a string
/** @par Example:
    @code{.py} string str = chan.readBlock(4096, 0, 30s); @endcode

    @param size the maximum size of the block of data to read in bytes
    @param stream_id the stream ID to read (0 is the default, meaning \c stdin, 1 is for \c stderr
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @return a string representing the block read; note that if a multibyte character encoding is being read and the end of the block lands in the middle of a character, then the string returned (or the next string read) could have invalid bytes if an attempt is made to use the string as-is

    @throw SSH2CHANNEL-READBLOCK-ERROR zero or negative value passed for block size; negative value passed for stream id; libssh2 reported an error on the channel while waiting for data from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed;
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
string SSH2Channel::readBlock(softint size, softint stream_id = 0, timeout timeout = -1) {
   static const char *SSH2CHANNEL_READBLOCK_ERROR = "SSH2CHANNEL-READBLOCK-ERROR";
   if (size <= 0) {
      xsink->raiseException(SSH2CHANNEL_READBLOCK_ERROR, "expecting a positive size for the block size to read, got " QLLD " instead; use SSH2Channel::read() to read available data without a block size", size);
      return 0;
   }
   if (stream_id < 0) {
      xsink->raiseException(SSH2CHANNEL_READBLOCK_ERROR, "expecting non-negative integer for stream id as optional second argument to SSH2Channel::readBlock(blocksize, [streamid], [timeout_ms]), got " QLLD " instead; use 0 for stdin, 1 for stderr", stream_id);
      return 0;
   }

   return c->read(size, stream_id, timeout, xsink);
}

//! Reads a block of data of a given size on the given stream and returns it as a binary object
/** @par Example:
    @code{.py} binary b = chan.readBinaryBlock(4096, 0, 30s); @endcode

    @param size the maximum size of the block of data to read in bytes
    @param stream_id the stream ID to read (0 is the default, meaning \c stdin, 1 is for \c stderr
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @return a binary object of data representing the block read

    @throw SSH2CHANNEL-READBLOCK-ERROR zero or negative value passed for block size; negative value passed for stream id; libssh2 reported an error on the channel while waiting for data from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
binary SSH2Channel::readBinaryBlock(softint size, softint stream_id = 0, timeout timeout = -1) {
   static const char *SSH2CHANNEL_READBINARYBLOCK_ERROR = "SSH2CHANNEL-READBINARYBLOCK-ERROR";
   if (size <= 0) {
      xsink->raiseException(SSH2CHANNEL_READBINARYBLOCK_ERROR, "expecting a positive size for the block size to read, got " QLLD " instead; use SSH2Channel::readBinary() to read available data without a block size", size);
      return 0;
   }
   if (stream_id < 0) {
      xsink->raiseException(SSH2CHANNEL_READBINARYBLOCK_ERROR, "expecting non-negative integer for stream id as optional second argument to SSH2Channel::readBinaryBlock(blocksize, [streamid], [timeout_ms]), got " QLLD " instead; use 0 for stdin, 1 for stderr", stream_id);
      return 0;
   }
   return c->readBinary(size, stream_id, timeout, xsink);
}

//! Writes data to a stream
/** @par Example:
    @code{.py} chan.write(data, 0, 30s); @endcode

    @param data the data to write; must be either a string or binary
    @param stream_id the stream ID to write (0 is the default, 1 is for \c stderr)
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-WRITE-ERROR invalid stream ID; libssh2 reported an error on the channel while waiting for a response from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::write(data data, softint stream_id = 0, timeout timeout_ms = -1) {
   static const char *SSH2CHANNEL_WRITE_ERROR = "SSH2CHANNEL-WRITE-ERROR";
   const void *buf = 0;
   qore_size_t buflen;

   qore_type_t t = data.getType();

   TempEncodingHelper tmp;
   if (t == NT_STRING) {
      const QoreStringNode *str = data.get<const QoreStringNode>();
      tmp.set(str, c->getEncoding(), xsink);
      if (*xsink)
	 return 0;

      buf = tmp->getBuffer();
      buflen = tmp->strlen();
   }
   else {
      const BinaryNode *b = data.get<const BinaryNode>();
      buf = b->getPtr();
      buflen = b->size();
   }

   // ignore zero-length writes
   if (!buflen)
      return 0;

   if (stream_id < 0) {
      xsink->raiseException(SSH2CHANNEL_WRITE_ERROR, "expecting non-negative integer for stream id as optional second argument to SSH2Channel::write(data data, softint streamid, timeout timeout_ms), got " QLLD " instead; use 0 for stdin, 1 for stderr", stream_id);
      return 0;
   }

   c->write(xsink, buf, buflen, stream_id, timeout_ms);
}

//! Closes the channel
/** @par Example:
    @code{.py} chan.close(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-CLOSE-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::close(timeout timeout = -1) {
   c->close(xsink, timeout);
}

//! Wait for the remote end to acknowledge the close request
/** @par Example:
    @code{.py} chan.waitClosed(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-WAITCLOSED-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::waitClosed(timeout timeout = -1) {
   c->waitClosed(xsink, timeout);
}

//! Returns the exit code raised by the process running on the remote host at the other end of the named channel
/** @par Example:
    @code{.py} int rc = chan.getExitStatus(); @endcode

    Note that the exit status may not be available if the remote end has not yet set its status to closed

    @return the exit code raised by the process running on the remote host at the other end of the named channel

    @throw SSH2CHANNEL-ERROR the channel has been closed
 */
int SSH2Channel::getExitStatus() {
   return c->getExitStatus(xsink);
}

//! Request X11 forwarding on the channel
/** @par Example:
    @code{.py} chan.requestX11Forwarding(NOTHING, NOTHING, NOTHING, NOTHING, 30s); @endcode

    @param screen_no the X11 screen number to forward
    @param single_connection set to True to forward only a single connection on the channel
    @param auth_proto the authorization protocol to use
    @param auth_cookie the authorization cookie to use
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-REQUESTX11FORWARDING-ERROR invalid stream ID; libssh2 reported an error on the channel while waiting for data from the server
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::requestX11Forwarding(softint screen_no = 0, bool single_connection = False, string auth_proto = "", string auth_cookie = "", timeout timeout = -1) {
   c->requestX11Forwarding(xsink, (int)screen_no, single_connection, auth_proto->strlen() ? auth_proto->getBuffer() : 0, auth_cookie->strlen() ? auth_cookie->getBuffer() : 0, timeout);
}

//! Sets the default string encoding for the channel; all string data read from the channel will be tagged with the encoding given
/** @par Example:
    @code{.py} chan.setEncoding("utf8"); @endcode

    @param encoding the string encoding to set for the channel
 */
nothing SSH2Channel::setEncoding(string encoding) {
   c->setEncoding(QEM.findCreate(encoding));
}

//! Returns the name of the default string encoding of the channel
/** @par Example:
    @code{.py} string enc = chan.getEncoding(); @endcode

    @return the name of the default string encoding of the channel
 */
string SSH2Channel::getEncoding() [flags=CONSTANT] {
   return new QoreStringNode(c->getEncoding()->getCode());
}

//! Queue data in substreams (i.e. \c stderr, etc) for eventual reading
/** @par Example:
    @code{.py} chan.extendedDataNormal(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-EXTENDEDDATANORMAL-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::extendedDataNormal(timeout timeout = -1) {
   c->extendedDataNormal(xsink, timeout);
}

//! Merge substreams (i.e. \c stderr, etc) into stream 0 for reading
/** @par Example:
    @code{.py} chan.extendedDataMerge(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-EXTENDEDDATAMERGE-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::extendedDataMerge(timeout timeout = -1) {
   c->extendedDataMerge(xsink, timeout);
}

//! Discard all data in substreams (i.e. stderr, etc) immediately when it arrives
/** @par Example:
    @code{.py} chan.extendedDataIgnore(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds); a negative value means do not time out

    @throw SSH2CHANNEL-EXTENDEDDATAIGNORE-ERROR server returned an error while waiting for a response
    @throw SSH2CHANNEL-ERROR the channel has been closed
    @throw SSH2CHANNEL-TIMEOUT timeout communicating on channel
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
nothing SSH2Channel::extendedDataIgnore(timeout timeout = -1) {
   c->extendedDataIgnore(xsink, timeout);
}

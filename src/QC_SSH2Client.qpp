/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SSH2Client.qpp defines the SSH2Client class */
/*
    QC_SSH2Client.qpp

    libssh2 ssh2 client integration into qore

    Copyright 2009 Wolfgang Ritzinger
    Copyright 2010 - 2020 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "SSH2Client.h"

extern QoreClass* QC_SSH2BASE;
extern QoreClass* QC_SSH2CHANNEL;

//! SSH2 connection info hash
/**
*/
hashdecl Qore::SSH2::Ssh2ConnectionInfo {
    //! the host name of the remote server
    string ssh2host;

    //! the port number of the remote server
    int ssh2port;

    //! the user name used for the connection
    string ssh2user;

    //! the filename of the local private key file used
    string keyfile_priv;

    //! the filename of the local public key file used
    string keyfile_pub;

    //! The fingerprint of the public host key of the remote server as a string of hex digit pairs separated by colons (:), ex: \c "AC:AA:DF:3F:49:82:5A:1A:DE:C9:ED:14:00:7D:65:9E" or \c NOTHING if not connected
    *string fingerprint;

    //! a string giving the authentication mechanism used: \c "publickey", \c "password", \c "keyboard-interactive" or \c NOTHING if not connected
    *string authenticated;

    //! tells if the connection is currently active or not
    bool connected;

    //! a hash of strings giving the crytographic methods used for the connection
    hash<string, string> methods;
}

//! SSH2 file stat info hash
/**
*/
hashdecl Qore::SSH2::Ssh2StatInfo {
    //! the permissions / mode of the file
    int mode;

    //! a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
    string permissions;

    //! file size in bytes
    int size;

    //! the last accessed date/time of the file
    date atime;

    //! the last modified date/time of the file
    date mtime;

    //! the uid of the user owning the file
    int uid;

    //! the gid of the group owning the file
    int gid;
}

//! allows Qore programs to establish an ssh2 connection to a remote server
/**
 */
qclass SSH2Client [arg=SSH2Client* c; ns=Qore::SSH2; dom=NETWORK; vparent=SSH2Base];

//! creates the object with the given hostname and port number
/** @par Example:
    @code{.py} ssh2client SSH2Client("host", 4022); @endcode

    @param url the remote host to connect to - can also be a url like \c "ssh://user:pass@hostname:port"
    @param port the port number on the remote host to connect to; if the port is 0, then the port given in the url argument is used; if none is given there, then the default port is used (22)

    @throw SSH2CLIENT-PARAMETER-ERROR empty url passed
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message
 */
SSH2Client::constructor(string url, softint port = 0) {
    QoreURL qurl(url);

    if (!qurl.getHost()) {
        xsink->raiseException("SSH2CLIENT-PARAMETER-ERROR", "no hostname found in URL '%s'", url->getBuffer());
        return;
    }

    if (qurl.getProtocol() && strcasecmp("ssh", qurl.getProtocol()->getBuffer()) && strcasecmp("ssh2", qurl.getProtocol()->getBuffer())) {
        xsink->raiseException("SSH2CLIENT-PARAMETER-ERROR", "URL given in the first argument to SSH2Client::constructor() specifies invalid protocol '%s' (expecting 'ssh' or 'ssh2')", qurl.getProtocol()->getBuffer());
        return;
    }

    // create private data object
    SSH2Client* mySSH2Client = new SSH2Client(qurl, (int)port);
    self->setPrivate(CID_SSH2CLIENT, mySSH2Client);
}

//! throws an exception; currently SSH2Client objects cannot be copied
/** @throw SSH2CLIENT-COPY-ERROR copying SSH2Client objects is not currently implemented
 */
SSH2Client::copy() {
    xsink->raiseException("SSH2CLIENT-COPY-ERROR", "copying ssh2 connection objects is not allowed");
}

//! returns a hash with information about the current connection status
/** @par Example:
    @code{.py} hash<Ssh2ConnectionInfo> h = ssh2client.info(); @endcode

    this method is safe to call when not connected

    @return a hash with the following keys:
    - \c ssh2host: (string) the host name of the remote server
    - \c ssh2port: (int) the port number of the remote server
    - \c ssh2user: (string) the user name used for the connection
    - \c keyfile_priv: (string) the filename of the local private key file used
    - \c keyfile_pub: (string) the filename of the local public key file used
    - \c fingerprint: (*string) The fingerprint of the public host key of the remote server as a string of hex digit pairs separated by colons (:), ex: \c "AC:AA:DF:3F:49:82:5A:1A:DE:C9:ED:14:00:7D:65:9E" or \c NOTHING if not connected
    - \c authenticated: (*string) a string giving the authentication mechanism used: \c "publickey", \c "password", \c "keyboard-interactive" or \c NOTHING if not connected
    - \c connected: (bool) tells if the connection is currently active or not
    - \c methods: (hash) a hash of strings giving the crytographic methods used for the connection
 */
hash<Ssh2ConnectionInfo> SSH2Client::info() [flags=CONSTANT] {
    return c->sshInfo(hashdeclSsh2ConnectionInfo, xsink);
}

//! Opens a login session and returns a SSH2Channel object for the session
/** @par Example:
    @code{.py} SSH2Channel chan = ssh2client.openSessionChannel(30s); @endcode

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel
 */
SSH2Channel SSH2Client::openSessionChannel(timeout timeout = 60s) {
    return c->openSessionChannel(xsink, timeout);
}

//! Opens a port forwarding channel and returns the corresponding SSH2Channel object for the new forwarded connection
/** @par Example:
    @code{.py} SS2Channel chan = ssh2client.("host", 4022, NOTHING, NOTHING, 30s); @endcode

    @param host the remote host to connect to
    @param port the port number on the remote host to connect to
    @param source_host the host name to report as the source of the connection
    @param source_port the port number to report as the source of the connection
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SSH2CLIENT-OPENDIRECTTCPIPCHANNEL-ERROR port number for forwarded channel as second argument cannot be zero; source port number as fourth argument cannot be zero
    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel
 */
SSH2Channel SSH2Client::openDirectTcpipChannel(string host, softint port, string source_host = "127.0.0.1", softint source_port = 22, timeout timeout = 60s) {
    static const char *SSH2CLIENT_OPENDIRECTTCPIPCHANNEL_ERR = "SSH2CLIENT-OPENDIRECTTCPIPCHANNEL-ERROR";

    if (!port) {
        xsink->raiseException(SSH2CLIENT_OPENDIRECTTCPIPCHANNEL_ERR, "port number for forwarded channel as second argument to SSH2Client::openDirectTcpipChannel() cannot be zero");
        return QoreValue();
    }

    if (!source_port) {
        xsink->raiseException(SSH2CLIENT_OPENDIRECTTCPIPCHANNEL_ERR, "source port number as fourth argument to SSH2Client::openDirectTcpipChannel() cannot be zero");
        return QoreValue();
    }

    return c->openDirectTcpipChannel(xsink, host->getBuffer(), port, source_host->getBuffer(), source_port, timeout);
}

//! opens a channel for retrieving a remote file with an optional timeout value and an optional reference for returning file status information
/** @par Example:
    @code{.py}
hash<Ssh2StatInfo> info;
SS2Channel chan = ssh2client.scpGet("/tmp/file.txt", 30s, \info); @endcode

    @param path the path of the remote file to get
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)
    @param statinfo an optional reference to an Ssh2StatInfo hash for file status info with the following keys:
    - \c "mode": the file's mode
    - \c "permissions": a string of the file's mode (ex: \c "drwxr-xr-x")
    - \c "size": the size of the file in bytes
    - \c "atime": the last access time of the file
    - \c "mtime": the last modified time of the file

    @return an SSH2Channel object is returned to use to retrieve the file's data

    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel
 */
SSH2Channel SSH2Client::scpGet(string path, timeout timeout = 60s, *reference<hash<Ssh2StatInfo>> statinfo) {
    ReferenceHolder<QoreHashNode> ref(statinfo ? new QoreHashNode(hashdeclSsh2StatInfo, xsink) : nullptr, xsink);

    ReferenceHolder<QoreObject> o(c->scpGet(xsink, path->c_str(), timeout, *ref), xsink);
    if (o && statinfo) {
        QoreTypeSafeReferenceHelper rh(statinfo, xsink);
        // a deadlock exception occurred accessing the reference's value pointer
        if (!rh || rh.assign(ref.release()))
            return QoreValue();
    }
    return o.release();
}

//! Retrieves a remote file and writes its content to an @ref OutputStream
/** @par Example:
    @code{.py} ssh2client.scpGet("file.txt", outputStream); @endcode

    @param path the path of the remote file to get
    @param os the output stream
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel

    @since ssh2 1.1
 */
nothing SSH2Client::scpGet(string path, Qore::OutputStream[OutputStream] os, timeout timeout = 60s) {
    SimpleRefHolder<OutputStream> osHolder(os);
    c->scpGet(xsink, path->getBuffer(), os, timeout);
}

//! Opens a channel for sending a file to the remote server; an SSH2Channel object is returned to use to send the file's data
/** @par Example:
    @code{.py} SS2Channel chan = ssh2client.scpPut("/tmp/file.txt", size, 0644, 2010-12-25, 2010-12-25, 30s); @endcode

    @param remote_path the path of the file to save on the remote server
    @param size the size of the file to send; this parameter is required
    @param mode the file's mode on the remote machine
    @param mtime the file's last modified time to create on the remote machine
    @param atime the file's last access time to create on the remote machine
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return an SSH2Channel object is returned to use to send the file's data

    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel
 */
SSH2Channel SSH2Client::scpPut(string remote_path, softint size, softint mode = 0644, *date mtime, *date atime, timeout timeout = 60s) {
    static const char *SSH2CLIENT_SCPPUT_ERR = "SSH2CLIENT-SCPPUT-ERROR";

    if (size <= 0) {
        xsink->raiseException(SSH2CLIENT_SCPPUT_ERR, "invalid file size as second argument to SSH2Client::scpPut() (got invalid size " QLLD ")", size);
        return QoreValue();
    }

    return c->scpPut(xsink, remote_path->getBuffer(), size, (int)mode, mtime ? mtime->getEpochSeconds() : 0, atime ? atime->getEpochSeconds() : 0, timeout);
}

//! Sends a file to the remote server; the content of the file is read from an @ref InputStream
/** @par Example:
    @code{.py} ssh2client.scpPut("/tmp/file.txt", inputStream, size, 0644, 2010-12-25, 2010-12-25, 30s); @endcode

    @param remote_path the path of the file to save on the remote server
    @param is the input stream to read from
    @param size the size of the file to send; this parameter is required
    @param mode the file's mode on the remote machine
    @param mtime the file's last modified time to create on the remote machine
    @param atime the file's last access time to create on the remote machine
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SSH2CLIENT-NOT-CONNECTED client is not connected
    @throw SSH2CLIENT-TIMEOUT timeout opening channel
    @throw SSH2-ERROR error opening channel

    @since ssh2 1.1
 */
nothing SSH2Client::scpPut(string remote_path, Qore::InputStream[InputStream] is, softint size, softint mode = 0644, *date mtime, *date atime, timeout timeout = 60s) {
    SimpleRefHolder<InputStream> isHolder(is);
    static const char *SSH2CLIENT_SCPPUT_ERR = "SSH2CLIENT-SCPPUT-ERROR";

    if (size <= 0) {
        xsink->raiseException(SSH2CLIENT_SCPPUT_ERR, "invalid file size as third argument to SSH2Client::scpPut() (got invalid size " QLLD ")", size);
        return QoreValue();
    }

    c->scpPut(xsink, remote_path->getBuffer(), is, size, (int)mode, mtime ? mtime->getEpochSeconds() : 0, atime ? atime->getEpochSeconds() : 0, timeout);
}

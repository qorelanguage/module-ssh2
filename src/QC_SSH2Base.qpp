/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SSH2Base.qpp defines the SSH2Base class */
/*
  QC_SSH2Base.qpp

  libssh2 ssh2 client integration in Qore

  Qore Programming Language

  Copyright 2009 Wolfgang Ritzinger

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_SSH2Base.h"
#include "SSH2Client.h"

static const char *SSH2_CONNECTED = "SSH2-CONNECTED";

//! base class for SFTPClient and SSH2Client
/** The SSH2Base class provides common methods to the SSH2Client and SFTPClient classes
 */
qclass SSH2Base [arg=SSH2Client* myself; ns=Qore::SSH2; dom=NETWORK];

//! Throws an exception; the constructor cannot be called manually
/** Throws an exception if called directly; this class cannot be instantiated directly

    @throw SSH2BASE-CONSTRUCTOR-ERROR this class is an abstract class and cannot be instantiated directly or directly inherited by a user-defined class
 */
SSH2Base::constructor() {
   xsink->raiseException("SSH2BASE-CONSTRUCTOR-ERROR", "this class is an abstract class and cannot be instantiated directly or directly inherited by a user-defined class");
}

//! connect to remote system
/** Connects to the remote system; if a connection is already established, then it is disconnected first

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SOCKET-CONNECT-ERROR error establishing socket connection (no listener, port blocked, etc); timeout establishing socket connection
    @throw SSH2CLIENT-CONNECT-ERROR no user name set; ssh2 or libssh2 error
    @throw SSH2-ERROR error initializing or establishing ssh2 session
    @throw SSH2CLIENT-AUTH-ERROR no proper authentication method found
    @throw SFTPCLIENT-CONNECT-ERROR error initializing sftp session or getting remote path (exception only possible when called from an SFTPClient object)

    @par Example:
    @code $sftpclient.connect(30s); @endcode
 */
nothing SSH2Base::connect(timeout timeout = -1) {
   myself->connect(timeout, xsink);
}

//! Disconnects from the remote system; throws an exception if the object is not currently connected
/** @throw SSH2CLIENT-NOT-CONNECTED the client is not connected

    @par Example:
    @code $sftpclient.disconnect(); @endcode
 */
nothing SSH2Base::disconnect() {
   myself->disconnect(0, xsink);
}

//! Sets the user name for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param user the user name to set for the next connection

    @throw SSH2-CONNECTED this method cannot be called when a connection is established

    @par Example:
    @code $sftpclient.setUser("username"); @endcode
 */
nothing SSH2Base::setUser(string user) {
   if (myself->setUser(user->getBuffer()))
      xsink->raiseException(SSH2_CONNECTED, "usage of SSH2Base::setUser() is not allowed when connected");
}

//! Sets the password for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param pass the password to use for the next connection

    @throw SSH2-CONNECTED this method cannot be called when a connection is established

    @par Example:
    @code $sftpclient.setPassword("pass"); @endcode
 */
nothing SSH2Base::setPassword(string pass) {
   if (myself->setPassword(pass->getBuffer()))
      xsink->raiseException(SSH2_CONNECTED, "usage of SSH2Base::setPassword() is not allowed when connected");
}

//! Sets path to the private key and optionally the public key to use for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param priv_key the path to the private key file to use for the next connection
    @param pub_key optional: the path to the public key file to use for the next connection; note that if this argument is not passed, then the public key file's name will be automaticaly generated by appending \c ".pub" to the private key file's name

    @throw SSH2-CONNECTED this method cannot be called when a connection is established
    @throw SSH2-SETKEYS-ERROR the given keys are not available or readable

    @note
    - both keys must be present (private and public) and readable in order for key-based authentication to work
    - if the keys are not valid no exception is thrown here, however key-based authentication will fail with am error like: \c "SSH2CLIENT-AUTH-ERROR: No proper authentication method found" (the same or similar error can be raised when the server does not accept otherwise valid keys)

    @par Example:
    @code $sftpclient.setKeys($ENV.HOME + "/.ssh/id_rsa", $ENV.HOME + "/.ssh/id_rsa.pub"); @endcode
 */
nothing SSH2Base::setKeys(string priv_key, *string pub_key) [dom=FILESYSTEM] {
   myself->setKeys(priv_key->getBuffer(), pub_key ? pub_key->getBuffer() : 0, xsink);
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SSH2Base.qpp defines the SSH2Base class */
/*
  QC_SSH2Base.qpp

  libssh2 ssh2 client integration in Qore

  Qore Programming Language

  Copyright 2009 Wolfgang Ritzinger

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_SSH2Base.h"
#include "SSH2Client.h"

static const char *SSH2_CONNECTED = "SSH2-CONNECTED";

#ifndef _QORE_HAS_SOCKET_PERF_API
static AbstractQoreNode *missing_method_error(const char *meth, const char *qv, ExceptionSink *xsink) {
   xsink->raiseException("MISSING-FEATURE-ERROR", "the %s() method is not available on this build; to use thie method compile the ssh2 module with Qore v%s of higher and reinstall", meth, qv);
   return 0;
}
#endif

//! base class for SFTPClient and SSH2Client
/** The SSH2Base class provides common methods to the SSH2Client and SFTPClient classes
 */
qclass SSH2Base [arg=SSH2Client* myself; ns=Qore::SSH2; dom=NETWORK];

//! Throws an exception; the constructor cannot be called manually
/** Throws an exception if called directly; this class cannot be instantiated directly

    @throw SSH2BASE-CONSTRUCTOR-ERROR this class is an abstract class and cannot be instantiated directly or directly inherited by a user-defined class
 */
SSH2Base::constructor() {
   xsink->raiseException("SSH2BASE-CONSTRUCTOR-ERROR", "this class is an abstract class and cannot be instantiated directly or directly inherited by a user-defined class");
}

//! connect to remote system
/** Connects to the remote system; if a connection is already established, then it is disconnected first

    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SOCKET-CONNECT-ERROR error establishing socket connection (no listener, port blocked, etc); timeout establishing socket connection
    @throw SSH2CLIENT-CONNECT-ERROR no user name set; ssh2 or libssh2 error
    @throw SSH2-ERROR error initializing or establishing ssh2 session
    @throw SSH2CLIENT-AUTH-ERROR no proper authentication method found
    @throw SFTPCLIENT-CONNECT-ERROR error initializing sftp session or getting remote path (exception only possible when called from an SFTPClient object)

    @par Example:
    @code $sftpclient.connect(30s); @endcode
 */
nothing SSH2Base::connect(timeout timeout = 1m) {
   myself->connect(timeout, xsink);
}

//! Disconnects from the remote system; throws an exception if the object is not currently connected
/** @throw SSH2CLIENT-NOT-CONNECTED the client is not connected
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @par Example:
    @code $sftpclient.disconnect(); @endcode
 */
nothing SSH2Base::disconnect(timeout timeout = 1m) {
   myself->disconnect(0, timeout, xsink);
}

//! Sets the user name for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param user the user name to set for the next connection

    @throw SSH2-CONNECTED this method cannot be called when a connection is established

    @par Example:
    @code $sftpclient.setUser("username"); @endcode
 */
nothing SSH2Base::setUser(string user) {
   if (myself->setUser(user->getBuffer()))
      xsink->raiseException(SSH2_CONNECTED, "usage of SSH2Base::setUser() is not allowed when connected");
}

//! Sets the password for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param pass the password to use for the next connection

    @throw SSH2-CONNECTED this method cannot be called when a connection is established

    @par Example:
    @code $sftpclient.setPassword("pass"); @endcode
 */
nothing SSH2Base::setPassword(string pass) {
   if (myself->setPassword(pass->getBuffer()))
      xsink->raiseException(SSH2_CONNECTED, "usage of SSH2Base::setPassword() is not allowed when connected");
}

//! Sets path to the private key and optionally the public key to use for the next connection; can only be called when a connection is not established, otherwise an exception is thrown
/** @param priv_key the path to the private key file to use for the next connection
    @param pub_key optional: the path to the public key file to use for the next connection; note that if this argument is not passed, then the public key file's name will be automaticaly generated by appending \c ".pub" to the private key file's name

    @throw SSH2-CONNECTED this method cannot be called when a connection is established
    @throw SSH2-SETKEYS-ERROR the given keys are not available or readable

    @note
    - both keys must be present (private and public) and readable in order for key-based authentication to work
    - if the keys are not valid no exception is thrown here, however key-based authentication will fail with am error like: \c "SSH2CLIENT-AUTH-ERROR: No proper authentication method found" (the same or similar error can be raised when the server does not accept otherwise valid keys)

    @par Example:
    @code $sftpclient.setKeys($ENV.HOME + "/.ssh/id_rsa", $ENV.HOME + "/.ssh/id_rsa.pub"); @endcode
 */
nothing SSH2Base::setKeys(string priv_key, *string pub_key) [dom=FILESYSTEM] {
   myself->setKeys(priv_key->getBuffer(), pub_key ? pub_key->getBuffer() : 0, xsink);
}

//! returns @ref Qore::True "True" if the session is connected, @ref Qore::False "False" if not
/** @return @ref Qore::True "True" if the session is connected, @ref Qore::False "False" if not

    @par Example:
    @code my bool $b = $sftpclient.connected(); @endcode

    @since ssh2 0.9.8.1
 */
bool SSH2Base::connected() [flags=CONSTANT] {
  return myself->ssh_connected();
}

//! Removes any warning @ref Qore::Thread::Queue "Queue" object from the Socket
/** @par Example:
    @code
$sftpclient.clearWarningQueue();
    @endcode

    @see SSH2Base::setWarningQueue()

    @since ssh2 1.0
 */
nothing SSH2Base::clearWarningQueue() {
#ifdef _QORE_HAS_SOCKET_PERF_API
   myself->clearWarningQueue(xsink);
#else
   missing_method_error("SSH2Base::clearWarningQueue", "0.8.10", xsink);
   return 0;
#endif
}

//! Sets a @ref Qore::Thread::Queue "Queue" object to receive socket warnings
/** @par Example:
    @code
$sftpclient.setWarningQueue(5000, 5000, $queue, "socket-1");
    @endcode

    @param warning_ms the threshold in milliseconds for individual socket actions (send, receive, connect), if exceeded, a socket warning is placed on the warning queue with the following keys:
    - \c "type": a string with the constant value \c "SOCKET-OPERATION-WARNING"
    - \c "operation": a string giving the operation that caused the warning (ex: \c "connect")
    - \c "us": an integer giving the number of microseconds for the operation
    - \c "timeout": an integer giving the warning threshold in microseconds 
    - \c "arg": if any \c "arg" argument is passed to the @ref Qore::Socket::setWarningQueue() "Socket::setWarningQueue()" method, it will be included in the warning hash here 
    @param warning_bs value in bytes per second; if any call has performance below this threshold, a socket warning is placed on the warning queue with th following keys:
    - \c "type": a string with the constant value \c "SOCKET-THROUGHPUT-WARNING"
    - \c "dir": either \c "send" or \c "recv" depending on the direction of the data flow
    - \c "bytes": the amount of bytes sent
    - \c "us": an integer giving the number of microseconds for the operation
    - \c "bytes_sec": a float giving the transfer speed in bytes per second
    - \c "threshold": an integer giving the warning threshold in bytes per second
    - \c "arg": if any \c "arg" argument is passed to the @ref Qore::Socket::setWarningQueue() "Socket::setWarningQueue()" method, it will be included in the warning hash here 
    @param queue the @ref Qore::Thread::Queue "Queue" object to receive warning events
    @param arg an optional argument to be placed in the \c "arg" key in each warning hash (could be used to identify the socket for example)
    @param min_ms the minimum transfer time with a resolution of milliseconds for a transfer to be eligible for triggering a warning; transfers that take less than this period of time are not eligible for raising a warning

    @throw QUEUE-ERROR the Queue passed has a maximum size set
    @throw SOCKET-SETWARNINGQUEUE-ERROR at least one of \a warning_ms and \a warning_bs must be > 0

    @see SSH2Base::clearWarningQueue()

    @since ssh2 1.0
 */
nothing SSH2Base::setWarningQueue(int warning_ms, int warning_bs, Queue[Queue] queue, any arg, timeout min_ms = 1s) {
   ReferenceHolder<Queue> q(queue, xsink);
#ifdef _QORE_HAS_SOCKET_PERF_API
   if (queue->getMax() != -1) {
      xsink->raiseException("QUEUE-ERROR", "the Queue object passed as a maximum size of %d entr%s, which could cause internal I/O to freeze in the Socket object if used; use a Queue object with no maximum size for I/O monitoring", queue->getMax(), queue->getMax() == 1 ? "y" : "ies");
      return 0;
   }
   // pass reference from QoreObject::getReferencedPrivateData() to function
   myself->setWarningQueue(xsink, warning_ms, warning_bs, q.release(), arg ? arg->refSelf() : 0, min_ms);
#else
   missing_method_error("SSH2Base::setWarningQueue", "0.8.10", xsink);
   return 0;
#endif
}

//! Returns performance statistics for the socket
/** @par Example:
    @code
my hash $h = $sftpclient.getUsageInfo();
    @endcode

    @return a hash with the following keys:
    - \c "bytes_sent": an integer giving the total amount of bytes sent
    - \c "bytes_recv": an integer giving the total amount of bytes received
    - \c "us_sent": an integer giving the total number of microseconds spent sending data
    - \c "us_recv": an integer giving the total number of microseconds spent receiving data
    - \c "arg": (only if warning values have been set with @ref Qore::Socket::setWarningQueue() "Socket::setWarningQueue()") the optional argument for warning hashes
    - \c "timeout": (only if warning values have been set with @ref Qore::Socket::setWarningQueue() "Socket::setWarningQueue()") the warning timeout in microseconds
    - \c "min_throughput": (only if warning values have been set with @ref Qore::Socket::setWarningQueue() "Socket::setWarningQueue()") the minimum warning throughput in bytes/sec

    @since ssh2 1.0

    @see SSH2Base::clearStats()
 */
hash SSH2Base::getUsageInfo() [flags=CONSTANT] {
#ifdef _QORE_HAS_SOCKET_PERF_API
   return myself->getUsageInfo();
#else
   missing_method_error("SSH2Base::getUsageInfo", "0.8.10", xsink);
   return 0;
#endif
}

//! Clears performance statistics
/** @par Example:
    @code
$sftpclient.clearStats();
    @endcode

    @since ssh2 1.0

    @see SSH2Base::getUsageInfo()
*/
SSH2Base::clearStats() {
#ifdef _QORE_HAS_SOCKET_PERF_API
   myself->clearStats();
#else
   missing_method_error("SSH2Base::clearStats", "0.8.10", xsink);
   return 0;
#endif
}

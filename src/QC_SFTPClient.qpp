/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SFTPClient.qpp defines the SFTPClient class */
/*
    SFTPClient.qpp

    libssh2 SFTP client integration into qore

    Copyright 2009 Wolfgang Ritzinger
    Copyright 2010 - 2019 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "SFTPClient.h"
#include "QC_SSH2Base.h"

static QoreHashNode *attr2hash(const LIBSSH2_SFTP_ATTRIBUTES &attr, ExceptionSink* xsink) {
    ReferenceHolder<QoreHashNode> ret(new QoreHashNode(hashdeclSsh2StatInfo, xsink), xsink);

    if (attr.flags & LIBSSH2_SFTP_ATTR_SIZE)
        ret->setKeyValue("size", attr.filesize, xsink);
    if (attr.flags & LIBSSH2_SFTP_ATTR_ACMODTIME) {
        ret->setKeyValue("atime", DateTimeNode::makeAbsolute(currentTZ(), (int64)attr.atime), xsink);
        ret->setKeyValue("mtime", DateTimeNode::makeAbsolute(currentTZ(), (int64)attr.mtime), xsink);
    }
    if (attr.flags & LIBSSH2_SFTP_ATTR_UIDGID) {
        ret->setKeyValue("uid", attr.uid, xsink);
        ret->setKeyValue("gid", attr.gid, xsink);
    }
    if (attr.flags & LIBSSH2_SFTP_ATTR_PERMISSIONS) {
        ret->setKeyValue("mode", attr.permissions, xsink);
        ret->setKeyValue("permissions", new QoreStringNode(mode2str(attr.permissions)), xsink);
    }

    return ret.release();
}

//! SFTP file event hash
/**
*/
hashdecl SftpFileInfo {
    //! the name of the file, link, or directory
    string name;

    //! the size of the file in bytes
    int size;

    //! the UID of the owner of the file
    int uid;

    //! the GID of the owner of the file
    int gid;

    //! the permissions / mode of the file
    int mode;

    //! the last accessed date/time of the file
    date atime;

    //! the last modified date/time of the file
    date mtime;

    //! the type of file; one of: \c "REGULAR", \c "DIRECTORY", \c "SYMBOLIC-LINK", \c "BLOCK-DEVICE", \c "CHARACTER-DEVICE", \c "FIFO", \c "SYMBOLIC-LINK", \c "SOCKET", \c "UNKNOWN"
    string type;

    //! a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")
    string perm;
}

//! SFTP dir event hash
/**
*/
hashdecl SftpDirInfo {
    //! the path used
    string path;

    //! sorted list of subdirectory names in the directory
    list<string> directories;

    //! sorted list of file names in the directory
    list<string> files;

    //! sorted list of symbolic links in the directory
    list<string> links;
}

//! SFTP connection info hash
/**
*/
hashdecl SftpConnectionInfo {
    //! the host name of the remote server
    string ssh2host;

    //! the port number of the remote server
    int ssh2port;

    //! the user name used for the connection
    string ssh2user;

    //! the filename of the local private key file used
    string keyfile_priv;

    //! the filename of the local public key file used
    string keyfile_pub;

    //! The fingerprint of the public host key of the remote server as a string of hex digit pairs separated by colons (:), ex: \c "AC:AA:DF:3F:49:82:5A:1A:DE:C9:ED:14:00:7D:65:9E" or \c NOTHING if not connected
    *string fingerprint;

    //! a string giving the authentication mechanism used: \c "publickey", \c "password", \c "keyboard-interactive" or \c NOTHING if not connected
    *string authenticated;

    //! tells if the connection is currently active or not
    bool connected;

    //! a hash of strings giving the crytographic methods used for the connection
    hash<string, string> methods;

    //! a string giving the path name set in the object or \c NOTHING if no path is set
    *string path;
}

//! allows Qore programs to use the sftp protocol with a remote server
/**
 */
qclass SFTPClient [arg=SFTPClient* myself; ns=Qore::SSH2; dom=NETWORK; vparent=SSH2Base];

//! Creates the object with the given URL
/** @par Example:
    @code{.py} SFTPClient sftpclient("sftp://user:pass@host:4022"); @endcode

    @param url the remote host to connect to - can also be a url like \c "sftp://user:pass@hostname:port"; if any scheme is given in the URL, then it must be \c "sftp" or an \c SFTPCLIENT-PARAMETER-ERROR exception will be thrown
    @param port the port number on the remote host to connect to; if the port is 0, then the port given in the url argument is used; if none is given there, then the default port is used (22)

    @throw SFTPCLIENT-PARAMETER-ERROR unknown protocol passed in URL; no hostname in URL
 */
SFTPClient::constructor(string url, softint port = 0) {
   QoreURL qurl(url);

   if (!qurl.getHost()) {
      xsink->raiseException("SFTPCLIENT-PARAMETER-ERROR", "no hostname found in URL '%s'", url->getBuffer());
      return;
   }

   if (qurl.getProtocol() && strcasecmp("sftp", qurl.getProtocol()->getBuffer())) {
      xsink->raiseException("SFTPCLIENT-PARAMETER-ERROR", "URL given in the first argument to SFTPClient::constructor() specifies invalid protocol '%s' (expecting 'sftp')", qurl.getProtocol()->getBuffer());
      return;
   }

   // create private data object
   self->setPrivate(CID_SFTPCLIENT, new SFTPClient(qurl, (int)port));
}

//! Throws an exception; currently SFTPClient objects cannot be copied
/** @throw SFTPCLIENT-COPY-ERROR copying SFTPClient objects is not currently implemented
 */
SFTPClient::copy() {
   xsink->raiseException("SFTPCLIENT-COPY-ERROR", "copying sftp connection objects is not allowed");
}

//! Returns a hash with information about the current connection status
/** @par Example:
    @code{.py} hash<SftpConnectionInfo> h = sftpclient.info(); @endcode

    this method is safe to call when not connected

    @return a hash with the following keys:
    - \c ssh2host: (string) the host name of the remote server
    - \c ssh2port: (int) the port number of the remote server
    - \c ssh2user: (string) the user name used for the connection
    - \c keyfile_priv: (string) the filename of the local private key file used
    - \c keyfile_pub: (string) the filename of the local public key file used
    - \c fingerprint: (*string) The fingerprint of the public host key of the remote server as a string of hex digit pairs separated by colons (:), ex: \c "AC:AA:DF:3F:49:82:5A:1A:DE:C9:ED:14:00:7D:65:9E" or \c NOTHING if not connected
    - \c authenticated: (*string) a string giving the authentication mechanism used: \c "publickey", \c "password", \c "keyboard-interactive" or \c NOTHING if not connected
    - \c connected: (bool) tells if the connection is currently active or not
    - \c methods: (hash) a hash of strings giving the crytographic methods used for the connection
    - \c path: (*string) a string giving the path name set in the object or \c NOTHING if no path is set
*/
hash<SftpConnectionInfo> SFTPClient::info() [flags=CONSTANT] {
    return myself->sftpInfo(xsink);
}

//! Returns the current path as a string or \c NOTHING if no path is set
/** @par Example:
    @code{.py} *string path = sftpclient.path(); @endcode

    @return the current path as a string or \c NOTHING if no path is set
*/
*string SFTPClient::path() [flags=CONSTANT] {
   return myself->sftpPath();
}

//! Returns a hash of directory information; throws an exception if any errors occur
/** @par Example:
    @code{.py} hash<auto> h = sftpclient.list(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path The pathname of the directory to list; if no path is given, then information about the current directory is returned
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return a hash with the following keys containing and sorted lists of directory, file, or symbolic link names, respectively:
    - \c path: the path used
    - \c directories: sorted list of subdirectory names in the directory
    - \c files: sorted list of file names in the directory
    - \c links: sorted list of symbolic links in the directory

    @throw SFTPCLIENT-LIST-ERROR failed to list directory
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message

    @see SFTPClient::listFull()
*/
hash<SftpDirInfo> SFTPClient::list(*string path, timeout timeout = 60s) [flags=RET_VALUE_ONLY] {
   return myself->sftpList(path ? path->getBuffer() : 0, (int)timeout, xsink);
}

//! Returns a list of directory information with detailed information for files, links, and directories; throws an exception if any errors occur
/** @par Example:
    @code{.py} listlist<hash<SftpFileInfo>> l = sftpclient.listFull(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path The pathname of the directory to list; if no path is given, then information about the current directory is returned
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return a list of hashes; each hash has the following keys:
    - \c name: the name of the file, link, or directory
    - \c size: the size of the file in bytes
    - \c uid: the UID of the owner of the file
    - \c gid: the GID of the owner of the file
    - \c mode: the permissions / mode of the file
    - \c atime: the last accessed date/time of the file
    - \c mtime: the last modified date/time of the file
    - \c type: the type of file; one of: \c "REGULAR", \c "DIRECTORY", \c "SYMBOLIC-LINK", \c "BLOCK-DEVICE", \c "CHARACTER-DEVICE", \c "FIFO", \c "SYMBOLIC-LINK", \c "SOCKET", or \c "UNKNOWN"
    - \c perm: a string giving UNIX-style permissions for the file (ex: "-rwxr-xr-x")

    @throw SFTPCLIENT-LIST-ERROR failed to list directory
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SSH2 protocol response; server returned an error message

    @see SFTPClient::list()

    @since ssh2 0.9.8.1
*/
list<hash<SftpFileInfo>> SFTPClient::listFull(*string path, timeout timeout = 60s) [flags=RET_VALUE_ONLY] {
   return myself->sftpListFull(path ? path->getBuffer() : 0, (int)timeout, xsink);
}

//! Returns a hash of information about a file or \c NOTHING if the file cannot be found
/** @par Example:
    @code{.py} *hash<Ssh2StatInfo> h = sftpclient.stat(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path the pathname of the file to stat
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return \c NOTHING if the path was not found or a hash with the following keys (note that some hash keys may not be present if the data was not returned from the remote server):
    - \c size: (int) the size of the file in bytes
    - \c atime: (date) the date/time the file was last accessed
    - \c mtime: (date) the date/time the file was last modified
    - \c uid: (int) the userid of the file's owner
    - \c gid: (int) the groupid of the file
    - \c mode: (int) the mode of the file as an integer
    - \c type: the type of file; one of: \c "REGULAR", \c "DIRECTORY", \c "SYMBOLIC-LINK", \c "BLOCK-DEVICE", \c "CHARACTER-DEVICE", \c "FIFO", \c "SYMBOLIC-LINK", \c "SOCKET", or \c "UNKNOWN"
    - \c permissions: (string) a string giving the symbolic mode of the file

    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
*/
*hash<Ssh2StatInfo> SFTPClient::stat(string path, timeout timeout = 60s) [flags=RET_VALUE_ONLY] {
    LIBSSH2_SFTP_ATTRIBUTES attr;
    int rc = myself->sftpGetAttributes(path->getBuffer(), &attr, (int)timeout, xsink);
    return rc < 0 ? QoreValue() : attr2hash(attr, xsink);
}

//! Deletes a file on the server side; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.removeFile(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path the pathname of the file to delete
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
*/
nothing SFTPClient::removeFile(string path, timeout timeout = 60s) {
   myself->sftpUnlink(path->getBuffer(), (int)timeout, xsink);
}

//! Renames or moves a remote file; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.rename("file.txt", "file.txt.orig"); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.
    Note that this command is executed with the \c LIBSSH2_SFTP_RENAME_OVERWRITE option set to \c True, but that this option is commonly ignored by sshd servers, in which case if the target file already exists, an \c SSH2-ERROR exception will be raised

    @param old_name the old pathname of the file
    @param new_name the new pathname of the file
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message; file exists and server does not allow overwriting
*/
nothing SFTPClient::rename(string old_name, string new_name, timeout timeout = 60s) {
   myself->sftpRename(old_name->getBuffer(), new_name->getBuffer(), (int)timeout, xsink);
}

//! Changes the mode of a remote file or directory; sticky bits may not be set; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.chmod("file.txt", 0600); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path the pathname of the file or directory to update
    @param mode the new mode to se
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-PARAMETER-ERROR mode setting is only possible for user, group and other (no sticky bits)
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message; file exists and server does not allow overwriting
*/
nothing SFTPClient::chmod(string path, int mode, timeout timeout = 60s) {
   // check if mode is in range
  if (mode != (mode & (int64)SFTP_UGOMASK)) {
      xsink->raiseException("SFTPCLIENT-PARAMETER-ERROR", "mode setting is only possible for user, group and other (no sticky bits)");
      return 0;
   }

  myself->sftpChmod(path->getBuffer(), (int)mode, (int)timeout, xsink);
}

//! Retrieves a remote file and writes its content to an @ref Qore::OutputStream "OutputStream"; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.get(filepath, outputStream); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param remote_path the remote pathname of the file to retrieve
    @param os the output stream to write to
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return the number of bytes transferred

    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
    @throw SFTPCLIENT-GET-ERROR error retrieving SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation

    @see
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()

    @since ssh2 1.1
*/
int SFTPClient::get(string remote_path, Qore::OutputStream[OutputStream] os, timeout timeout = 60s) {
   SimpleRefHolder<OutputStream> osHolder(os);
   return myself->sftpGet(remote_path->getBuffer(), os, (int) timeout, xsink);
}

//! Retrieves a remote file and returns it as a binary object; throws an exception if any errors occur
/** @par Example:
    @code{.py} binary b = sftpclient.getFile("file.bin"); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path the pathname of the file to retrieve
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-GETFILE-ERROR error retrieving SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getTextFile()
    - SFTPClient::put()
    - SFTPClient::putFile()
    - SFTPClient::retrieveFile()
    - SFTPClient::transferFile()
*/
binary SFTPClient::getFile(string path, timeout timeout = 60s) {
   return myself->sftpGetFile(path->getBuffer(), (int)timeout, xsink);
}

//! Retrieves a remote file and returns it as a string; throws an exception if any errors occur
/** @par Example:
    @code{.py} string str = sftpclient.getTextFile("file.txt"); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path the pathname of the file to retrieve
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)
    @param encoding an optional file encoding/character set. Qore default encoding is used if not set.

    @throw SFTPCLIENT-GETTEXTFILE-ERROR error retrieving SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::put()
    - SFTPClient::putFile()
    - SFTPClient::retrieveFile()
    - SFTPClient::transferFile()
*/
string SFTPClient::getTextFile(string path, timeout timeout = 60s, *string encoding) {
   const QoreEncoding *qe = encoding ? QEM.findCreate(encoding) : QCS_DEFAULT;
   return myself->sftpGetTextFile(path->getBuffer(), (int)timeout, qe, xsink);
}

//! Retrieves a remote file and saves it on the local filesystem; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.retrieveFile("file.bin", "/tmp/file.bin"); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param remote_path the remote pathname of the file to retrieve
    @param local_path the local filesystem pathname to save the file to
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return the number of bytes transferred

    @throw SFTPCLIENT-RETRIEVEFILE-ERROR error retrieving SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()
    - SFTPClient::put()
    - SFTPClient::putFile()
    - SFTPClient::transferFile()

    @since ssh2 1.0
*/
int SFTPClient::retrieveFile(string remote_path, string local_path, timeout timeout = 60s, int mode = 0644) [dom=FILESYSTEM] {
   return myself->sftpRetrieveFile(remote_path->getBuffer(), local_path->getBuffer(), (int)timeout, mode, xsink);
}

//! Saves a file on the remote server from a binary argument and returns the number of bytes sent; throws an exception if any errors occur
/** @par Example:
    @code{.py} int size = sftpclient.putFile(bin, "file.bin", 0600); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param bin the file data as a binary object
    @param path the remote path name on the server
    @param mode the mode of the file on the server
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return the number of bytes actually sent

    @throw SFTPCLIENT-PUTFILE-ERROR error sending SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()
    - SFTPClient::put()
    - SFTPClient::retrieveFile()
    - SFTPClient::transferFile()
*/
int SFTPClient::putFile(binary bin, string path, int mode = 0644, timeout timeout = 60s) {
   // transfer the file
   return myself->sftpPutFile((const char *)bin->getPtr(), bin->size(), path->getBuffer(), (int)mode, (int)timeout, xsink);
}

//! Saves a file on the remote server from a string argument and returns the number of bytes sent; throws an exception if any errors occur
/** @par Example:
    @code{.py} int size = sftpclient.putFile(str, filepath, 0600); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param data the file data as a string
    @param path the remote path name on the server
    @param mode the mode of the file on the server
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @return the number of bytes actually sent

    @throw SFTPCLIENT-PUTFILE-ERROR error sending SFTP data
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()
    - SFTPClient::put()
    - SFTPClient::retrieveFile()
    - SFTPClient::transferFile()
*/
int SFTPClient::putFile(string data, string path, int mode = 0644, timeout timeout = 60s) {
   // transfer the file
   return myself->sftpPutFile(data->getBuffer(), data->strlen(), path->getBuffer(), (int)mode, (int)timeout, xsink);
}

//! Transfers a local file to the remote server and returns the number of bytes sent; throws an exception if any errors occur
/** @par Example:
    @code{.py} int size = sftpclient.transferFile(local_filepath, remote_filepath, 0600); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param local_path the path to the local file on the local filesystem
    @param remote_path the remote path name on the server
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)
    @param mode the mode of the file on the server; if not given then the same file mode on the local filesystem will be used on the remote

    @return the number of bytes actually sent

    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()
    - SFTPClient::put()
    - SFTPClient::putFile()
    - SFTPClient::retrieveFile()

    @since ssh2 1.0
*/
int SFTPClient::transferFile(string local_path, string remote_path, timeout timeout = 60s, *int mode) [dom=FILESYSTEM] {
   // transfer the file
   return myself->sftpTransferFile(local_path->getBuffer(), remote_path->getBuffer(), (int)mode, (int)timeout, xsink);
}

//! Saves a file on the remote server from an InputStream and returns the number of bytes sent; throws an exception if any errors occur
/** @par Example:
    @code{.py} int size = sftpclient.put(inputStream, "file.bin"); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param is the input stream to upload to the server
    @param remote_path the remote path name on the server
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)
    @param mode the mode of the file on the server

    @return the number of bytes actually sent

    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
    @throw SFTPCLIENT-TIMEOUT timeout in network operation

    @see
    - SFTPClient::get()
    - SFTPClient::getFile()
    - SFTPClient::getTextFile()
    - SFTPClient::putFile()
    - SFTPClient::retrieveFile()
    - SFTPClient::transferFile()

    @since ssh2 1.1
*/
int SFTPClient::put(Qore::InputStream[InputStream] is, string remote_path, timeout timeout = 60s, int mode = 0644) {
   SimpleRefHolder<InputStream> isHolder(is);
   return myself->sftpPut(is, remote_path->getBuffer(), (int) mode, (int) timeout, xsink);
}

//! Makes a directory on the remote server; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.mkdir(path, 0700); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path The pathname of the new directory
    @param mode the mode of the new directory
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-MKDIR-ERROR directory name is an empty string
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
*/
nothing SFTPClient::mkdir(string path, int mode = 0755, timeout timeout = 60s) {
   myself->sftpMkdir(path->getBuffer(), (int)mode, (int)timeout, xsink);
}

//! Removes a directory on the remote server; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.rmdir(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path The pathname of the directory to remove
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-RMDIR-ERROR directory name is an empty string
    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
*/
nothing SFTPClient::rmdir(string path, timeout timeout = 60s) {
   myself->sftpRmdir(path->getBuffer(), (int)timeout, xsink);
}

//! Changes the directory on the remote server and returns the new directory; throws an exception if any errors occur
/** @par Example:
    @code{.py} sftpclient.chdir(path); @endcode

    If a connection has not yet been established, it is implicitly attempted here before executing the method.

    @param path The pathname of the directory to change to
    @param timeout an integer giving a timeout in milliseconds or a relative date/time value (ex: \c 15s for 15 seconds)

    @throw SFTPCLIENT-TIMEOUT timeout in network operation
    @throw SSH2-ERROR socket error sending data; timeout on socket; invalid SFTP protocol response; server returned an error message
*/
string SFTPClient::chdir(string path, timeout timeout = 60s) {
   return myself->sftpChdir(path->getBuffer(), (int)timeout, xsink);
}

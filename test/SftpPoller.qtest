#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires ssh2 >= 1.0
%requires SftpPoller >= 1.0
%requires QUnit
%requires Util

%exec-class SftpPollerTest

class MySftpPoller inherits SftpPoller {
    public {}

    private {
        list l = ();
        bool verbose;
    }

    constructor(SFTPClient sc, hash opts, bool n_verbose) : SftpPoller(sc, opts) {
        verbose = n_verbose;
    }

    nothing singleFileEvent(hash fh) {
        if (verbose)
            printf("GOT FILE: %y\n", fh - "data" + ("data_type": fh.data.type(), "data_size": fh.data.size()));
        # in this case, the polling stop operation will take effect after all the singleFileEvent() calls are made for the polling operation
        stopNoWait();
    }

    nothing postSingleFileEvent(hash fh) {
        l += fh + ("data": sftp.getTextFile(fh.name));
    }

    list getFileList() {
        return l;
    }
}

class SftpPollerTest inherits QUnit::Test {
    public {}

    private {
        const Timeout = 10s;

        const MyOpts = Opts + (
            "privkey": "k,private-key=s",
            "mask": "m,mask=s",
            );

        SFTPClient sc;

        const ColumnOffset = 25;

        const Files = (
            "a.txt": "abc",
            "b.txt": "bcd",
            "c.txt": "cde",
            "d.php": "def",
            );

        const Result = (
            ("name": "a.txt",
             "size": 3,
             "type": "REGULAR",
             "data": "abc",
            ),
            ("name": "b.txt",
             "size": 3,
             "type": "REGULAR",
             "data": "bcd",
            ),
            ("name": "c.txt",
             "size": 3,
             "type": "REGULAR",
             "data": "cde",
            ),
            );
    }

    constructor() : Test("SftpPollerTest", "1.0", \ARGV, MyOpts) {
        addTestCase("SftpPollerTests", \sftpPollerTests());

        string uri = shift ARGV ?? sprintf("%s@localhost", getusername());

        sc = new SFTPClient(uri);
        if (m_options.privkey)
            sc.setKeys(m_options.privkey);

        set_return_value(main());
    }

    private usageIntern() {
        TestReporter::usageIntern(ColumnOffset);
        printOption("-k,--private-key=ARG", "set private key to use for authentication", ColumnOffset);
    }

    sftpPollerTests() {
        code info = sub (string msg) {
            if (m_options.verbose)
                printf("INFO: %s\n", msg);
        };
        code detail = sub (string msg) {
            if (m_options.verbose > 1)
                printf("DETAIL: %s\n", msg);
        };
        code debug = sub (string msg) {
            if (m_options.verbose > 2)
                printf("DEBUG: %s\n", msg);
        };

        hash opts = (
            "log_info": info,
            "log_detail": detail,
            "log_debug": debug,
            "mask": "*.txt",
            );

        # setup directory
        string nd = sprintf("%s/%s/", tmp_location(), get_random_string());
        sc.mkdir(nd);
        map sc.putFile($1.value, nd + $1.key), Files.pairIterator();
        on_exit {
            map sc.removeFile(nd + $1), Files.keyIterator();
            sc.rmdir(nd);
        }

        opts.path = nd;

        MySftpPoller poller(sc, opts, m_options.verbose > 2);
        poller.start();
        poller.waitStop();
        list fl = poller.getFileList();
        # sort by file name
        fl = map $1.(Result[0].keys()), sort(fl, int sub (hash l, hash r) { return l.name <=> r.name; });
        assertEq(fl, Result);
    }
}
